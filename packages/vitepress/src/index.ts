import type { MaybeMultiURL, PageInfo, Plugin } from "@web-printer/core"
import { evaluateWaitForImgLoad } from "@web-printer/core"

export default function (options: {
  /**
   * Url of website page generated by mdbook, this page must have sidebar outline
   * @example
   * - "https://vitepress.vuejs.org/guide/"
   * - "https://vuejs.org/guide/introduction.html"
   * - {
   *    Guide: "https://vuejs.org/guide/introduction.html",
   *    API: "https://vuejs.org/api/application.html"
   *  }
   */
  url: MaybeMultiURL
}): Plugin {
  const { url } = options
  if (!url) throw new Error("url is required")
  return {
    async fetchPagesInfo({ context }) {
      async function fecth(url: string, group?: string) {
        await page.goto(url)
        const data = JSON.parse(
          await page.evaluate(`
(() => {
  const ret = []
  function d(k, groups) {
    k.forEach((level0) => {
      const title = level0.querySelector(":scope > .item .text")?.innerText
      const url = level0.querySelector(":scope > .item .link")?.href
      const children = level0.querySelectorAll(":scope > .items > .VPSidebarItem")
      if (url)
        ret.push({
          title,
          url,
          collapsed: false,
          selfGroup: Boolean(title && url && children.length),
          groups
        })
      if (children.length) d(children, [...groups, title].filter(Boolean))
    })
  }
  d(document.querySelectorAll(".level-0"), [])

  return JSON.stringify(ret.filter(k => k.title))
})()
  `)
        ) as PageInfo[]
        if (group) {
          data.forEach(k => {
            if (k.groups) k.groups.unshift(group)
            else k.groups = [group]
          })
        }
        return data
      }
      const page = await context.newPage()
      const pagesInfo = []
      if (typeof url === "string") {
        pagesInfo.push(...(await fecth(url)))
      } else {
        for (const [k, v] of Object.entries(url)) {
          pagesInfo.push(...(await fecth(v, k)))
        }
      }
      await page.close()
      return pagesInfo
    },
    async onPageLoaded({ page }) {
      await evaluateWaitForImgLoad(page, "main img")
    },
    injectStyle() {
      const style = `
    .vueschool,
    .vue-mastery-link,
    .edit-link,
    .vuejobs-wrapper {
        display: none !important;
    }

    [class*=language-] code {
        padding: 0 48px!important;
    }
    `
      return {
        style,
        contentSelector: "main",
        avoidBreakSelector: ".custom-block"
      }
    }
  }
}
